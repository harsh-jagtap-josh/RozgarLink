// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	application "github.com/harsh-jagtap-josh/RozgarLink/internal/app/application"

	mock "github.com/stretchr/testify/mock"

	worker "github.com/harsh-jagtap-josh/RozgarLink/internal/app/worker"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateWorker provides a mock function with given fields: ctx, workerData
func (_m *Service) CreateWorker(ctx context.Context, workerData worker.Worker) (worker.Worker, error) {
	ret := _m.Called(ctx, workerData)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorker")
	}

	var r0 worker.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, worker.Worker) (worker.Worker, error)); ok {
		return rf(ctx, workerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, worker.Worker) worker.Worker); ok {
		r0 = rf(ctx, workerData)
	} else {
		r0 = ret.Get(0).(worker.Worker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, worker.Worker) error); ok {
		r1 = rf(ctx, workerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkerByID provides a mock function with given fields: ctx, workerId
func (_m *Service) DeleteWorkerByID(ctx context.Context, workerId int) (int, error) {
	ret := _m.Called(ctx, workerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkerByID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, workerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, workerId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, workerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllWorkers provides a mock function with given fields: ctx
func (_m *Service) FetchAllWorkers(ctx context.Context) ([]worker.Worker, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllWorkers")
	}

	var r0 []worker.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]worker.Worker, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []worker.Worker); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]worker.Worker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchApplicationsByWorkerId provides a mock function with given fields: ctx, workerId
func (_m *Service) FetchApplicationsByWorkerId(ctx context.Context, workerId int) ([]application.ApplicationComplete, error) {
	ret := _m.Called(ctx, workerId)

	if len(ret) == 0 {
		panic("no return value specified for FetchApplicationsByWorkerId")
	}

	var r0 []application.ApplicationComplete
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]application.ApplicationComplete, error)); ok {
		return rf(ctx, workerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []application.ApplicationComplete); ok {
		r0 = rf(ctx, workerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.ApplicationComplete)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, workerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchWorkerByID provides a mock function with given fields: ctx, workerId
func (_m *Service) FetchWorkerByID(ctx context.Context, workerId int) (worker.Worker, error) {
	ret := _m.Called(ctx, workerId)

	if len(ret) == 0 {
		panic("no return value specified for FetchWorkerByID")
	}

	var r0 worker.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (worker.Worker, error)); ok {
		return rf(ctx, workerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) worker.Worker); ok {
		r0 = rf(ctx, workerId)
	} else {
		r0 = ret.Get(0).(worker.Worker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, workerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkerByID provides a mock function with given fields: ctx, workerData
func (_m *Service) UpdateWorkerByID(ctx context.Context, workerData worker.Worker) (worker.Worker, error) {
	ret := _m.Called(ctx, workerData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkerByID")
	}

	var r0 worker.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, worker.Worker) (worker.Worker, error)); ok {
		return rf(ctx, workerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, worker.Worker) worker.Worker); ok {
		r0 = rf(ctx, workerData)
	} else {
		r0 = ret.Get(0).(worker.Worker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, worker.Worker) error); ok {
		r1 = rf(ctx, workerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
