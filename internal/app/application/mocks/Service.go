// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	application "github.com/harsh-jagtap-josh/RozgarLink/internal/app/application"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateNewApplication provides a mock function with given fields: ctx, applicationData
func (_m *Service) CreateNewApplication(ctx context.Context, applicationData application.Application) (application.Application, error) {
	ret := _m.Called(ctx, applicationData)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewApplication")
	}

	var r0 application.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, application.Application) (application.Application, error)); ok {
		return rf(ctx, applicationData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, application.Application) application.Application); ok {
		r0 = rf(ctx, applicationData)
	} else {
		r0 = ret.Get(0).(application.Application)
	}

	if rf, ok := ret.Get(1).(func(context.Context, application.Application) error); ok {
		r1 = rf(ctx, applicationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationById provides a mock function with given fields: ctx, applicationId
func (_m *Service) DeleteApplicationById(ctx context.Context, applicationId int) (int, error) {
	ret := _m.Called(ctx, applicationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationById")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, applicationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, applicationId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, applicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllApplications provides a mock function with given fields: ctx
func (_m *Service) FetchAllApplications(ctx context.Context) ([]application.ApplicationComplete, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllApplications")
	}

	var r0 []application.ApplicationComplete
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]application.ApplicationComplete, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []application.ApplicationComplete); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.ApplicationComplete)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchApplicationById provides a mock function with given fields: ctx, applicationId
func (_m *Service) FetchApplicationById(ctx context.Context, applicationId int) (application.Application, error) {
	ret := _m.Called(ctx, applicationId)

	if len(ret) == 0 {
		panic("no return value specified for FetchApplicationById")
	}

	var r0 application.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (application.Application, error)); ok {
		return rf(ctx, applicationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) application.Application); ok {
		r0 = rf(ctx, applicationId)
	} else {
		r0 = ret.Get(0).(application.Application)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, applicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationById provides a mock function with given fields: ctx, applicationData
func (_m *Service) UpdateApplicationById(ctx context.Context, applicationData application.Application) (application.Application, error) {
	ret := _m.Called(ctx, applicationData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationById")
	}

	var r0 application.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, application.Application) (application.Application, error)); ok {
		return rf(ctx, applicationData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, application.Application) application.Application); ok {
		r0 = rf(ctx, applicationData)
	} else {
		r0 = ret.Get(0).(application.Application)
	}

	if rf, ok := ret.Get(1).(func(context.Context, application.Application) error); ok {
		r1 = rf(ctx, applicationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
