// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	sector "github.com/harsh-jagtap-josh/RozgarLink/internal/app/sector"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	*mock.Mock
}

// CreateNewSector provides a mock function with given fields: ctx, sectorData
func (_m *Service) CreateNewSector(ctx context.Context, sectorData sector.Sector) (sector.Sector, error) {
	ret := _m.Called(ctx, sectorData)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewSector")
	}

	var r0 sector.Sector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sector.Sector) (sector.Sector, error)); ok {
		return rf(ctx, sectorData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sector.Sector) sector.Sector); ok {
		r0 = rf(ctx, sectorData)
	} else {
		r0 = ret.Get(0).(sector.Sector)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sector.Sector) error); ok {
		r1 = rf(ctx, sectorData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSectorById provides a mock function with given fields: ctx, sectorId
func (_m *Service) DeleteSectorById(ctx context.Context, sectorId int) (int, error) {
	ret := _m.Called(ctx, sectorId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSectorById")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, sectorId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, sectorId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, sectorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllSectors provides a mock function with given fields: ctx
func (_m *Service) FetchAllSectors(ctx context.Context) ([]sector.Sector, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllSectors")
	}

	var r0 []sector.Sector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]sector.Sector, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []sector.Sector); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sector.Sector)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchSectorById provides a mock function with given fields: ctx, sectorId
func (_m *Service) FetchSectorById(ctx context.Context, sectorId int) (sector.Sector, error) {
	ret := _m.Called(ctx, sectorId)

	if len(ret) == 0 {
		panic("no return value specified for FetchSectorById")
	}

	var r0 sector.Sector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (sector.Sector, error)); ok {
		return rf(ctx, sectorId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) sector.Sector); ok {
		r0 = rf(ctx, sectorId)
	} else {
		r0 = ret.Get(0).(sector.Sector)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, sectorId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSectorById provides a mock function with given fields: ctx, sectorData
func (_m *Service) UpdateSectorById(ctx context.Context, sectorData sector.Sector) (sector.Sector, error) {
	ret := _m.Called(ctx, sectorData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSectorById")
	}

	var r0 sector.Sector
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sector.Sector) (sector.Sector, error)); ok {
		return rf(ctx, sectorData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sector.Sector) sector.Sector); ok {
		r0 = rf(ctx, sectorData)
	} else {
		r0 = ret.Get(0).(sector.Sector)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sector.Sector) error); ok {
		r1 = rf(ctx, sectorData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
