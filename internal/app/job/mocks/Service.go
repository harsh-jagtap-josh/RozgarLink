// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	application "github.com/harsh-jagtap-josh/RozgarLink/internal/app/application"

	job "github.com/harsh-jagtap-josh/RozgarLink/internal/app/job"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: ctx, jobData
func (_m *Service) CreateJob(ctx context.Context, jobData job.Job) (job.Job, error) {
	ret := _m.Called(ctx, jobData)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 job.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, job.Job) (job.Job, error)); ok {
		return rf(ctx, jobData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, job.Job) job.Job); ok {
		r0 = rf(ctx, jobData)
	} else {
		r0 = ret.Get(0).(job.Job)
	}

	if rf, ok := ret.Get(1).(func(context.Context, job.Job) error); ok {
		r1 = rf(ctx, jobData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobByID provides a mock function with given fields: ctx, jobId
func (_m *Service) DeleteJobByID(ctx context.Context, jobId int) (int, error) {
	ret := _m.Called(ctx, jobId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobByID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, jobId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, jobId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllJobs provides a mock function with given fields: ctx, filters
func (_m *Service) FetchAllJobs(ctx context.Context, filters job.JobFilters) ([]job.Job, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllJobs")
	}

	var r0 []job.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, job.JobFilters) ([]job.Job, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, job.JobFilters) []job.Job); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]job.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, job.JobFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchApplicationsByJobId provides a mock function with given fields: ctx, jobId
func (_m *Service) FetchApplicationsByJobId(ctx context.Context, jobId int) ([]application.ApplicationCompleteEmp, error) {
	ret := _m.Called(ctx, jobId)

	if len(ret) == 0 {
		panic("no return value specified for FetchApplicationsByJobId")
	}

	var r0 []application.ApplicationCompleteEmp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]application.ApplicationCompleteEmp, error)); ok {
		return rf(ctx, jobId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []application.ApplicationCompleteEmp); ok {
		r0 = rf(ctx, jobId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]application.ApplicationCompleteEmp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchJobByID provides a mock function with given fields: ctx, jobId
func (_m *Service) FetchJobByID(ctx context.Context, jobId int) (job.Job, error) {
	ret := _m.Called(ctx, jobId)

	if len(ret) == 0 {
		panic("no return value specified for FetchJobByID")
	}

	var r0 job.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (job.Job, error)); ok {
		return rf(ctx, jobId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) job.Job); ok {
		r0 = rf(ctx, jobId)
	} else {
		r0 = ret.Get(0).(job.Job)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, jobId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobByID provides a mock function with given fields: ctx, jobData
func (_m *Service) UpdateJobByID(ctx context.Context, jobData job.Job) (job.Job, error) {
	ret := _m.Called(ctx, jobData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobByID")
	}

	var r0 job.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, job.Job) (job.Job, error)); ok {
		return rf(ctx, jobData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, job.Job) job.Job); ok {
		r0 = rf(ctx, jobData)
	} else {
		r0 = ret.Get(0).(job.Job)
	}

	if rf, ok := ret.Get(1).(func(context.Context, job.Job) error); ok {
		r1 = rf(ctx, jobData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
