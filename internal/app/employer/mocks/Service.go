// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	employer "github.com/harsh-jagtap-josh/RozgarLink/internal/app/employer"
	job "github.com/harsh-jagtap-josh/RozgarLink/internal/app/job"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteEmployerById provides a mock function with given fields: ctx, employerId
func (_m *Service) DeleteEmployerById(ctx context.Context, employerId int) (int, error) {
	ret := _m.Called(ctx, employerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployerById")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, employerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, employerId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, employerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllEmployers provides a mock function with given fields: ctx
func (_m *Service) FetchAllEmployers(ctx context.Context) ([]employer.Employer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllEmployers")
	}

	var r0 []employer.Employer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]employer.Employer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []employer.Employer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]employer.Employer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchEmployerByID provides a mock function with given fields: ctx, employerId
func (_m *Service) FetchEmployerByID(ctx context.Context, employerId int) (employer.Employer, error) {
	ret := _m.Called(ctx, employerId)

	if len(ret) == 0 {
		panic("no return value specified for FetchEmployerByID")
	}

	var r0 employer.Employer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (employer.Employer, error)); ok {
		return rf(ctx, employerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) employer.Employer); ok {
		r0 = rf(ctx, employerId)
	} else {
		r0 = ret.Get(0).(employer.Employer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, employerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchJobsByEmployerId provides a mock function with given fields: ctx, employerId
func (_m *Service) FetchJobsByEmployerId(ctx context.Context, employerId int) ([]job.Job, error) {
	ret := _m.Called(ctx, employerId)

	if len(ret) == 0 {
		panic("no return value specified for FetchJobsByEmployerId")
	}

	var r0 []job.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]job.Job, error)); ok {
		return rf(ctx, employerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []job.Job); ok {
		r0 = rf(ctx, employerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]job.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, employerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterEmployer provides a mock function with given fields: ctx, employerData
func (_m *Service) RegisterEmployer(ctx context.Context, employerData employer.Employer) (employer.Employer, error) {
	ret := _m.Called(ctx, employerData)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEmployer")
	}

	var r0 employer.Employer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, employer.Employer) (employer.Employer, error)); ok {
		return rf(ctx, employerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, employer.Employer) employer.Employer); ok {
		r0 = rf(ctx, employerData)
	} else {
		r0 = ret.Get(0).(employer.Employer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, employer.Employer) error); ok {
		r1 = rf(ctx, employerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmployerById provides a mock function with given fields: ctx, employerData
func (_m *Service) UpdateEmployerById(ctx context.Context, employerData employer.Employer) (employer.Employer, error) {
	ret := _m.Called(ctx, employerData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployerById")
	}

	var r0 employer.Employer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, employer.Employer) (employer.Employer, error)); ok {
		return rf(ctx, employerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, employer.Employer) employer.Employer); ok {
		r0 = rf(ctx, employerData)
	} else {
		r0 = ret.Get(0).(employer.Employer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, employer.Employer) error); ok {
		r1 = rf(ctx, employerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
