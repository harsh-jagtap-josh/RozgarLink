// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/harsh-jagtap-josh/RozgarLink/internal/repo"
	mock "github.com/stretchr/testify/mock"
)

// WorkerStorer is an autogenerated mock type for the WorkerStorer type
type WorkerStorer struct {
	mock.Mock
}

// CreateWorker provides a mock function with given fields: ctx, workerData
func (_m *WorkerStorer) CreateWorker(ctx context.Context, workerData repo.Worker) (repo.Worker, error) {
	ret := _m.Called(ctx, workerData)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorker")
	}

	var r0 repo.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.Worker) (repo.Worker, error)); ok {
		return rf(ctx, workerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.Worker) repo.Worker); ok {
		r0 = rf(ctx, workerData)
	} else {
		r0 = ret.Get(0).(repo.Worker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.Worker) error); ok {
		r1 = rf(ctx, workerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkerByID provides a mock function with given fields: ctx, workerId
func (_m *WorkerStorer) DeleteWorkerByID(ctx context.Context, workerId int) (int, error) {
	ret := _m.Called(ctx, workerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkerByID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, workerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, workerId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, workerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllWorkers provides a mock function with given fields: ctx
func (_m *WorkerStorer) FetchAllWorkers(ctx context.Context) ([]repo.Worker, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllWorkers")
	}

	var r0 []repo.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repo.Worker, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repo.Worker); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Worker)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchApplicationsByWorkerId provides a mock function with given fields: ctx, workerId
func (_m *WorkerStorer) FetchApplicationsByWorkerId(ctx context.Context, workerId int) ([]repo.ApplicationComplete, error) {
	ret := _m.Called(ctx, workerId)

	if len(ret) == 0 {
		panic("no return value specified for FetchApplicationsByWorkerId")
	}

	var r0 []repo.ApplicationComplete
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]repo.ApplicationComplete, error)); ok {
		return rf(ctx, workerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []repo.ApplicationComplete); ok {
		r0 = rf(ctx, workerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.ApplicationComplete)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, workerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchWorkerByID provides a mock function with given fields: ctx, workerID
func (_m *WorkerStorer) FetchWorkerByID(ctx context.Context, workerID int) (repo.Worker, error) {
	ret := _m.Called(ctx, workerID)

	if len(ret) == 0 {
		panic("no return value specified for FetchWorkerByID")
	}

	var r0 repo.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (repo.Worker, error)); ok {
		return rf(ctx, workerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) repo.Worker); ok {
		r0 = rf(ctx, workerID)
	} else {
		r0 = ret.Get(0).(repo.Worker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, workerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWorkerByEmail provides a mock function with given fields: ctx, email
func (_m *WorkerStorer) FindWorkerByEmail(ctx context.Context, email string) bool {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindWorkerByEmail")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindWorkerById provides a mock function with given fields: ctx, id
func (_m *WorkerStorer) FindWorkerById(ctx context.Context, id int) bool {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindWorkerById")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateWorkerByID provides a mock function with given fields: ctx, workerData
func (_m *WorkerStorer) UpdateWorkerByID(ctx context.Context, workerData repo.Worker) (repo.Worker, error) {
	ret := _m.Called(ctx, workerData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkerByID")
	}

	var r0 repo.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.Worker) (repo.Worker, error)); ok {
		return rf(ctx, workerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.Worker) repo.Worker); ok {
		r0 = rf(ctx, workerData)
	} else {
		r0 = ret.Get(0).(repo.Worker)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.Worker) error); ok {
		r1 = rf(ctx, workerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWorkerStorer creates a new instance of WorkerStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkerStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkerStorer {
	mock := &WorkerStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
