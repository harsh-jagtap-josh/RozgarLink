// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/harsh-jagtap-josh/RozgarLink/internal/repo"
	mock "github.com/stretchr/testify/mock"
)

// AdminStorer is an autogenerated mock type for the AdminStorer type
type AdminStorer struct {
	mock.Mock
}

// DeleteAdmin provides a mock function with given fields: ctx, adminId
func (_m *AdminStorer) DeleteAdmin(ctx context.Context, adminId int) error {
	ret := _m.Called(ctx, adminId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdmin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, adminId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAdminByEmail provides a mock function with given fields: ctx, email
func (_m *AdminStorer) FindAdminByEmail(ctx context.Context, email string) bool {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindAdminByEmail")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindAdminById provides a mock function with given fields: ctx, adminId
func (_m *AdminStorer) FindAdminById(ctx context.Context, adminId int) bool {
	ret := _m.Called(ctx, adminId)

	if len(ret) == 0 {
		panic("no return value specified for FindAdminById")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, adminId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RegisterAdmin provides a mock function with given fields: ctx, adminData
func (_m *AdminStorer) RegisterAdmin(ctx context.Context, adminData repo.Admin) (repo.Admin, error) {
	ret := _m.Called(ctx, adminData)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAdmin")
	}

	var r0 repo.Admin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.Admin) (repo.Admin, error)); ok {
		return rf(ctx, adminData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.Admin) repo.Admin); ok {
		r0 = rf(ctx, adminData)
	} else {
		r0 = ret.Get(0).(repo.Admin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.Admin) error); ok {
		r1 = rf(ctx, adminData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminStorer creates a new instance of AdminStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminStorer {
	mock := &AdminStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
