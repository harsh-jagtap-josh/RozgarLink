// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/harsh-jagtap-josh/RozgarLink/internal/repo"
	mock "github.com/stretchr/testify/mock"
)

// EmployerStorer is an autogenerated mock type for the EmployerStorer type
type EmployerStorer struct {
	mock.Mock
}

// DeleteEmployerByID provides a mock function with given fields: ctx, employerId
func (_m *EmployerStorer) DeleteEmployerByID(ctx context.Context, employerId int) (int, error) {
	ret := _m.Called(ctx, employerId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmployerByID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, employerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, employerId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, employerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllEmployers provides a mock function with given fields: ctx
func (_m *EmployerStorer) FetchAllEmployers(ctx context.Context) ([]repo.Employer, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllEmployers")
	}

	var r0 []repo.Employer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repo.Employer, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repo.Employer); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Employer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchEmployerByID provides a mock function with given fields: ctx, employerId
func (_m *EmployerStorer) FetchEmployerByID(ctx context.Context, employerId int) (repo.Employer, error) {
	ret := _m.Called(ctx, employerId)

	if len(ret) == 0 {
		panic("no return value specified for FetchEmployerByID")
	}

	var r0 repo.Employer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (repo.Employer, error)); ok {
		return rf(ctx, employerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) repo.Employer); ok {
		r0 = rf(ctx, employerId)
	} else {
		r0 = ret.Get(0).(repo.Employer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, employerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindEmployerByEmail provides a mock function with given fields: ctx, employerEmail
func (_m *EmployerStorer) FindEmployerByEmail(ctx context.Context, employerEmail string) bool {
	ret := _m.Called(ctx, employerEmail)

	if len(ret) == 0 {
		panic("no return value specified for FindEmployerByEmail")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, employerEmail)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindEmployerById provides a mock function with given fields: ctx, employerId
func (_m *EmployerStorer) FindEmployerById(ctx context.Context, employerId int) bool {
	ret := _m.Called(ctx, employerId)

	if len(ret) == 0 {
		panic("no return value specified for FindEmployerById")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, employerId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindJobByEmployerId provides a mock function with given fields: ctx, employerId
func (_m *EmployerStorer) FindJobByEmployerId(ctx context.Context, employerId int) ([]repo.Job, error) {
	ret := _m.Called(ctx, employerId)

	if len(ret) == 0 {
		panic("no return value specified for FindJobByEmployerId")
	}

	var r0 []repo.Job
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]repo.Job, error)); ok {
		return rf(ctx, employerId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []repo.Job); ok {
		r0 = rf(ctx, employerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.Job)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, employerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterEmployer provides a mock function with given fields: ctx, employerData
func (_m *EmployerStorer) RegisterEmployer(ctx context.Context, employerData repo.Employer) (repo.Employer, error) {
	ret := _m.Called(ctx, employerData)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEmployer")
	}

	var r0 repo.Employer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.Employer) (repo.Employer, error)); ok {
		return rf(ctx, employerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.Employer) repo.Employer); ok {
		r0 = rf(ctx, employerData)
	} else {
		r0 = ret.Get(0).(repo.Employer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.Employer) error); ok {
		r1 = rf(ctx, employerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmployerById provides a mock function with given fields: ctx, employerData
func (_m *EmployerStorer) UpdateEmployerById(ctx context.Context, employerData repo.Employer) (repo.Employer, error) {
	ret := _m.Called(ctx, employerData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmployerById")
	}

	var r0 repo.Employer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.Employer) (repo.Employer, error)); ok {
		return rf(ctx, employerData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.Employer) repo.Employer); ok {
		r0 = rf(ctx, employerData)
	} else {
		r0 = ret.Get(0).(repo.Employer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.Employer) error); ok {
		r1 = rf(ctx, employerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmployerStorer creates a new instance of EmployerStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmployerStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmployerStorer {
	mock := &EmployerStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
