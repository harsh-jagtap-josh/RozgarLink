// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/harsh-jagtap-josh/RozgarLink/internal/repo"
	mock "github.com/stretchr/testify/mock"
)

// ApplicationStorer is an autogenerated mock type for the ApplicationStorer type
type ApplicationStorer struct {
	mock.Mock
}

// CreateNewApplication provides a mock function with given fields: ctx, applicationData
func (_m *ApplicationStorer) CreateNewApplication(ctx context.Context, applicationData repo.Application) (repo.Application, error) {
	ret := _m.Called(ctx, applicationData)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewApplication")
	}

	var r0 repo.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.Application) (repo.Application, error)); ok {
		return rf(ctx, applicationData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.Application) repo.Application); ok {
		r0 = rf(ctx, applicationData)
	} else {
		r0 = ret.Get(0).(repo.Application)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.Application) error); ok {
		r1 = rf(ctx, applicationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationByID provides a mock function with given fields: ctx, applicationId
func (_m *ApplicationStorer) DeleteApplicationByID(ctx context.Context, applicationId int) (int, error) {
	ret := _m.Called(ctx, applicationId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationByID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, applicationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, applicationId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, applicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllApplications provides a mock function with given fields: ctx
func (_m *ApplicationStorer) FetchAllApplications(ctx context.Context) ([]repo.ApplicationComplete, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAllApplications")
	}

	var r0 []repo.ApplicationComplete
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repo.ApplicationComplete, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repo.ApplicationComplete); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repo.ApplicationComplete)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchApplicationByID provides a mock function with given fields: ctx, applicationId
func (_m *ApplicationStorer) FetchApplicationByID(ctx context.Context, applicationId int) (repo.Application, error) {
	ret := _m.Called(ctx, applicationId)

	if len(ret) == 0 {
		panic("no return value specified for FetchApplicationByID")
	}

	var r0 repo.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (repo.Application, error)); ok {
		return rf(ctx, applicationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) repo.Application); ok {
		r0 = rf(ctx, applicationId)
	} else {
		r0 = ret.Get(0).(repo.Application)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, applicationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindApplicationById provides a mock function with given fields: ctx, applicationId
func (_m *ApplicationStorer) FindApplicationById(ctx context.Context, applicationId int) bool {
	ret := _m.Called(ctx, applicationId)

	if len(ret) == 0 {
		panic("no return value specified for FindApplicationById")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, applicationId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// UpdateApplicationByID provides a mock function with given fields: ctx, applicationData
func (_m *ApplicationStorer) UpdateApplicationByID(ctx context.Context, applicationData repo.Application) (repo.Application, error) {
	ret := _m.Called(ctx, applicationData)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationByID")
	}

	var r0 repo.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.Application) (repo.Application, error)); ok {
		return rf(ctx, applicationData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.Application) repo.Application); ok {
		r0 = rf(ctx, applicationData)
	} else {
		r0 = ret.Get(0).(repo.Application)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.Application) error); ok {
		r1 = rf(ctx, applicationData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationStorer creates a new instance of ApplicationStorer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationStorer {
	mock := &ApplicationStorer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
